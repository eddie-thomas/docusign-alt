/**
 * PDF coordinate
 */
interface Coordinate {
  /**
   * The coordinate is arranged [x, y], where `x` is the number of pixels from the left
   * and `y` is the number of pixels from the bottom.
   * - Left of PDF is `x = 0`
   * - Bottom of PDF is `y = 0`
   */
  coordinate: [number, number];
  /**
   * 1-based indexing, stating what page of the PDF the coordinate applies to.
   */
  page: number;
}

/**
 * Common field properties
 */
interface FieldProperties {
  /**
   * Array of coordinates
   *
   * @see {Coordinate.coordinate}
   */
  coordinates: Array<Coordinate>;
  /**
   * An optional default value used for the field.
   */
  default?: Array<string>;
}

/**
 * Auto generated field properties
 */
export interface AutoGeneratedFieldProperties extends FieldProperties {
  /**
   * Never render the field in the UI for generated values
   */
  renderFieldInPDF: false;
}

/**
 * User generated field properties
 *
 * - The user will enter the data, or if the field is allowed to be
 * undefined, a default will be used for the value
 */
export interface UserGeneratedFieldProperties extends FieldProperties {
  renderFieldInPDF: true;
  hasValues?: Array<string>;
  inputType: React.HTMLInputTypeAttribute;
  minCount?: number;
  maxCount?: number;
}

/**
 * The `default` property will initially look for other field identifiers to prefill the value.
 * If not it will assume the literal, or array of literals will be concatenated with the
 * default `join()` method.
 *
 * @see {UserGeneratedFieldProperties.default}
 */
export interface Fields {
  [fieldIdentifier: string]:
    | UserGeneratedFieldProperties
    | AutoGeneratedFieldProperties;
}

/**
 * Collections of fields that are interpreted by the UI as a field
 */
export interface FieldCollection {
  title: string;
  fieldIdentifiers: Array<string>;
  minCount?: number;
  maxCount: number;
}

export interface Form {
  collections: Array<FieldCollection>;
  fields: Fields;
  title: string;
}
