import { PDFDocument, StandardFonts } from "pdf-lib";

import type { FieldState } from "./components/Form";
import {
  AutoGeneratedFieldProperties,
  Fields,
  UserGeneratedFieldProperties,
} from "./fields";

interface WriteDataToPdfProps {
  pdf: PDFDocument;
  fields: Fields;
  formState: FieldState;
}

/**
 *
 * @param e - MouseEvent
 * @param page - Page number
 */
function addClickEventToCanvas(e: React.MouseEvent, page: number) {
  const mouseX = e.pageX;
  const mouseY = 792 - e.pageY;
  console.log(`Position: (${mouseX}, ${mouseY}) for page: ${page}`);
}

/**
 *
 * @param phoneNumberString -
 * @returns
 */
function formatPhoneNumber(phoneNumberString: string) {
  const cleaned = ("" + phoneNumberString).replace(/\D/g, "");
  const match = cleaned.match(/^(1|)?(\d{3})(\d{3})(\d{4})$/);
  if (match) {
    const intlCode = match[1] ? "+1 " : "";
    return [intlCode, "(", match[2], ") ", match[3], "-", match[4]].join("");
  }
  return phoneNumberString;
}

/**
 *
 * @returns Unique string
 */
function generateUniqueId(): string {
  const chars =
    "abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()-=_+[]{};':,./<>?";
  return Array(20)
    .fill(undefined)
    .map(() => chars[Math.round(Math.random() * chars.length)])
    .join("");
}

/**
 *
 * @param properties - Field properties, comes in as either auto generated field props or user generated field props
 * @returns
 */
function isUserFieldObject(
  properties: UserGeneratedFieldProperties | AutoGeneratedFieldProperties
): properties is UserGeneratedFieldProperties {
  return properties.renderFieldInPDF;
}

/**
 *
 * @async
 *
 * @returns Promise<PDFDocument>
 */
async function loadPdf(): Promise<PDFDocument> {
  const arrayBuffer = await fetch("/docusign-alt/pdf/waiver.pdf").then((res) =>
    res.arrayBuffer()
  );
  const doc = await PDFDocument.load(arrayBuffer);
  return doc;
}

/**
 *
 * @param fileName Name of the file
 * @param byte - The bytes for the PDF
 */
function saveByteArray(fileName: string, byte: Uint8Array) {
  const blob = new Blob([byte], { type: "application/pdf" });
  const link = document.createElement("a");
  link.href = window.URL.createObjectURL(blob);
  link.download = fileName;
  link.click();
}

/**
 * To pascal case
 *
 * @param value - String that is meant to be `snake cased` and will be properly formatted into Pascal case with `_` being interpreted as spaces
 * @returns string
 */
function toPascalCase(value: string): string {
  return value
    .split("_")
    .map((word: string) => `${word[0].toUpperCase()}${word.slice(1)}`)
    .join(" ");
}

/**
 *
 * @async
 *
 * @param props -
 * @param props.pdf - The PDF document
 * @param props.fields - The fields we'll need to write in, this is the field's metadata
 * @param props.formState - The actual data we'll inject into each of the field's coordinates
 * @returns Promise of the PDF document with the data written in
 */
async function writeDataToPdf({
  pdf,
  fields,
  formState,
}: WriteDataToPdfProps): Promise<PDFDocument> {
  const signatureFont = await pdf.embedFont(StandardFonts.TimesRomanItalic);
  Object.entries(fields).forEach(([fieldIdentifier, fieldProperties]) => {
    const { coordinates, default: defaultValue } = fieldProperties;
    const calculatedDefaultValue = defaultValue
      ?.map((idOrValue: string) => {
        // First look for identifier's and their user entered data
        const identifiersValue = formState[idOrValue];
        // If we have a value for it, then return it
        if (identifiersValue) return identifiersValue.join();
        // Otherwise just return the string
        return idOrValue;
      })
      .join();

    const fieldValue = formState[fieldIdentifier] || calculatedDefaultValue;

    if (fieldValue === undefined)
      throw Error("Cannot calculate value for field!");

    coordinates.forEach(({ coordinate: [x, y], page: pageNum }, index) => {
      const page = pdf.getPage(pageNum - 1);

      let text;
      if (isUserFieldObject(fieldProperties)) {
        if (
          fieldProperties.maxCount === fieldProperties.minCount &&
          fieldProperties.maxCount === 1
        ) {
          text = fieldValue instanceof Array ? fieldValue[0] : fieldValue;
        } else {
          text = fieldValue instanceof Array ? fieldValue[index] : fieldValue;
        }
      } else {
        text = fieldValue instanceof Array ? fieldValue[index] : fieldValue;
      }

      if (!text) return;

      page.moveTo(x, y);
      page.drawText(text, {
        size: 14,
        ...(fieldIdentifier.includes("signature") && {
          font: signatureFont,
        }),
      });
    });
  });

  return pdf;
}

export {
  addClickEventToCanvas,
  formatPhoneNumber,
  generateUniqueId,
  isUserFieldObject,
  loadPdf,
  saveByteArray,
  toPascalCase,
  writeDataToPdf,
};
